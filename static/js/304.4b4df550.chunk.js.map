{"version":3,"file":"static/js/304.4b4df550.chunk.js","mappings":"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","sources":["components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  padding: 5px;\n  border-radius: 10px;\n  box-shadow: 0 0 10px 1px #f2c0a88f;\n  transition: transform var(--animation-duration) var(--timing-function);\n  &:hover {\n    box-shadow: 0 0 13px 3px #a16103;\n    transform: scale(1.03);\n  }\n`;\n\nexport const Title = styled.p`\n  display: flex;\n  padding: 5px;\n  color: #3f51b5;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { Card, Title } from './MovieItem.styled';\nimport PropTypes from 'prop-types';\n\nconst MovieItem = ({ movie, state }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <li>\n        <Link\n          to={location.pathname === '/' ? `movies/${movie.id}` : `${movie.id}`}\n          state={{ from: state }}\n        >\n          <Card>\n            <img src={movie.photo} width=\"100%\" alt={movie.title} />\n            <Title>{movie.title}</Title>\n          </Card>\n        </Link>\n      </li>\n    </>\n  );\n};\n\nexport default MovieItem;\n\nMovieItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    photo: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }),\n  state: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 13px;\n  margin-top: 20px;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: 50px;\n  margin-right: 50px;\n`;\n","import MovieItem from 'components/MovieItem/MovieItem';\nimport { List } from './MovieList.styled';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies, state }) => {\n  return (\n    <List>\n      {movies.map(movie => (\n        <MovieItem key={movie.id} movie={movie} state={state} />\n      ))}\n    </List>\n  );\n};\nexport default MovieList;\n\nMovieItem.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n  state: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nconst Title = styled.h1`\n  display: flex;\n  justify-content: center;\n  font-size: 50px;\n  margin-top: 0;\n  margin-bottom: 30px;\n  color: #a16103;\n`;\nexport { Title };\n","import { useState, useEffect } from 'react';\nimport { getTrending } from 'services/moviesAPI';\nimport { Outlet } from 'react-router-dom';\nimport MovieList from 'components/MovieList/MovieList';\nimport { Title } from './Home.styled';\nimport Loader from 'components/Loader/Loader';\nimport { ToastContainer, toast } from 'react-toastify';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTrending()\n      .then(data => {\n        data.map(movie => setMovies(movies => [...movies, movie]));\n      })\n      .catch(error => setError({ error }))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <main>\n      {error && toast.error(`Something went wrong! ${error.message}`)}\n      <Title>Trending today</Title>\n      {<MovieList movies={movies} />}\n      {isLoading && <Loader />}\n      <Outlet />\n      <ToastContainer autoClose={3000} />\n    </main>\n  );\n};\nexport default Home;\n","import axios from 'axios';\nimport defaultImg from '../images/defaultImg.png';\nimport noFilm from '../images/noFilm.jpg';\nconst API_KEY = '9a3eb7a069130cbd83fc81cc8deda116';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst IMAGES_BASE_URL = 'https://image.tmdb.org/t/p';\n\nconst getTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  const data = [];\n\n  response.data.results.map(item => {\n    const photo = item.poster_path ? getImageUrl(item.poster_path) : noFilm;\n    return data.push({\n      title: item.title,\n      id: item.id,\n      photo: photo,\n    });\n  });\n  return data;\n};\n\nconst getSearch = async query => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    query: query,\n  });\n  const response = await axios.get(`${BASE_URL}/search/movie?${params}`);\n  const data = [];\n\n  response.data.results.map(item => {\n    const photo = item.poster_path ? getImageUrl(item.poster_path) : noFilm;\n    return data.push({\n      title: item.title,\n      id: item.id,\n      photo: photo,\n    });\n  });\n\n  return data;\n};\n\nconst getImageUrl = path => {\n  return `${IMAGES_BASE_URL}/w500/${path}`;\n};\n\nconst getMovie = async id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n  const response = await axios.get(`${BASE_URL}/movie/${id}?${params}`);\n  const data = response.data;\n  return {\n    id: data.id,\n    title: data.title,\n    image: getImageUrl(data.poster_path),\n    year: new Date(data.release_date).getFullYear(),\n    genres: data.genres.map(genre => genre.name).join(', '),\n    vote: data.vote_average,\n    votes: data.vote_count,\n    popularity: data.popularity,\n    originalTitle: data.original_title,\n    about: data.overview,\n  };\n};\n\nconst getCastInfo = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  const cast = [];\n\n  response.data.cast.map(item => {\n    const photo = item.profile_path\n      ? getImageUrl(item.profile_path)\n      : defaultImg;\n    return cast.push({\n      name: item.name,\n      character: item.character,\n      id: item.id,\n      photo: photo,\n    });\n  });\n  return cast;\n};\n\nconst getReviewsInfo = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return res.data.results;\n};\nexport { getTrending, getSearch, getMovie, getCastInfo, getReviewsInfo };\n"],"names":["Card","styled","Title","movie","state","location","useLocation","to","pathname","id","from","src","photo","width","alt","title","List","movies","map","MovieItem","PropTypes","useState","setMovies","isLoading","setIsLoading","error","setError","useEffect","getTrending","then","data","catch","finally","toast","message","MovieList","Loader","autoClose","API_KEY","BASE_URL","axios","response","results","item","poster_path","getImageUrl","noFilm","push","getSearch","query","params","URLSearchParams","api_key","path","getMovie","image","year","Date","release_date","getFullYear","genres","genre","name","join","vote","vote_average","votes","vote_count","popularity","originalTitle","original_title","about","overview","getCastInfo","movieId","cast","profile_path","defaultImg","character","getReviewsInfo","res"],"sourceRoot":""}